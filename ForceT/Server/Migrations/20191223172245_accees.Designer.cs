// <auto-generated />
using System;
using ForceT.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ForceT.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191223172245_accees")]
    partial class accees
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ForceT.Shared.Models.Adresse", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Agenceid")
                        .HasColumnType("int");

                    b.Property<int>("Codepostale")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Societé")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdresseId");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("ForceT.Shared.Models.Agence", b =>
                {
                    b.Property<int>("AgenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libellé")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgenceId");

                    b.ToTable("Agence");
                });

            modelBuilder.Entity("ForceT.Shared.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adressenlevement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adresslivraison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("ForceT.Shared.Models.Sondage", b =>
                {
                    b.Property<int>("SondageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libellé")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obligatoire")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SondageId");

                    b.ToTable("Sondage");
                });

            modelBuilder.Entity("ForceT.Shared.Models.Tournee", b =>
                {
                    b.Property<int>("TourneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Agenceid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_tournee")
                        .HasColumnType("datetime2");

                    b.Property<string>("Libellé")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LivreurId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehiculeId")
                        .HasColumnType("int");

                    b.HasKey("TourneeId");

                    b.ToTable("Tournee");
                });

            modelBuilder.Entity("ForceT.Shared.Models.Vehicule", b =>
                {
                    b.Property<int>("VehiculeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Matriculation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Poid")
                        .HasColumnType("int");

                    b.HasKey("VehiculeId");

                    b.ToTable("Vehicule");
                });

            modelBuilder.Entity("ForceT.Shared.Models.Zone", b =>
                {
                    b.Property<int>("zoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("codepostal")
                        .HasColumnType("int");

                    b.Property<string>("ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("zoneId");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ProfilId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ProfilId");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "671c3f34-36c8-4eac-a198-502cdfe8b4c3",
                            ConcurrencyStamp = "43c9d552-da99-4dc8-9566-ad18efe00e05",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fecd1e0f-21b3-4958-b76e-06451aea7740",
                            ConcurrencyStamp = "173573f6-a527-4c0c-98d2-2021da3a0752",
                            Name = "VehiculeCreat",
                            NormalizedName = "VehiculeCreat"
                        },
                        new
                        {
                            Id = "59abb89d-87c1-494f-aee5-435c50956f98",
                            ConcurrencyStamp = "ad91181b-c6b6-4eee-8b1e-e5e446f24ede",
                            Name = "VehiculeRead",
                            NormalizedName = "VehiculeRead"
                        },
                        new
                        {
                            Id = "3b6febf6-5bf0-4eb7-9cfe-eac6900deea0",
                            ConcurrencyStamp = "1c1d3287-b0b3-4976-ab10-ad8bd991c09d",
                            Name = "VehiculeUpdt",
                            NormalizedName = "VehiculeUpdt"
                        },
                        new
                        {
                            Id = "177da35d-cfaf-46ba-89d1-332dc579c4bf",
                            ConcurrencyStamp = "bd8c8988-942a-46b3-9ffa-fd6d044ef532",
                            Name = "VehiculeDlet",
                            NormalizedName = "VehiculeDlet"
                        },
                        new
                        {
                            Id = "1426379a-41c8-47d2-acc2-4eae9f64953c",
                            ConcurrencyStamp = "69c23d87-4cc5-474a-a61d-50c889e63298",
                            Name = "SondageCreat",
                            NormalizedName = "SondageCreat"
                        },
                        new
                        {
                            Id = "f69f6d5a-363f-40fa-a964-19ba7dce66e8",
                            ConcurrencyStamp = "60aa7b13-ef86-4531-95a9-f52d32966637",
                            Name = "SondageRead",
                            NormalizedName = "SondageRead"
                        },
                        new
                        {
                            Id = "b9d1c564-cecf-4bff-8528-adcbb1cc1527",
                            ConcurrencyStamp = "5804382c-7f2f-488c-b04e-81d9d003629c",
                            Name = "SondageUpdt",
                            NormalizedName = "SondageUpdt"
                        },
                        new
                        {
                            Id = "0c59916b-8238-45b8-ad16-1db52eea075a",
                            ConcurrencyStamp = "db314e89-e819-48d8-bc19-8ea4b5c7384c",
                            Name = "SondageDlet",
                            NormalizedName = "SondageDlet"
                        },
                        new
                        {
                            Id = "b1906b8f-7416-46af-bffd-89effd4b3057",
                            ConcurrencyStamp = "7585ac36-1101-4922-8391-a42aa3e4291f",
                            Name = "ZoneCreat",
                            NormalizedName = "ZoneCreat"
                        },
                        new
                        {
                            Id = "fb87144b-49d9-4d54-a234-48a770f846df",
                            ConcurrencyStamp = "91a0a81c-4d6e-4403-bb97-c884fd78954b",
                            Name = "ZoneRead",
                            NormalizedName = "ZoneRead"
                        },
                        new
                        {
                            Id = "0271e846-eb67-409e-af24-1fee48982897",
                            ConcurrencyStamp = "14074b29-ffd7-4fb7-b666-106b6b52466e",
                            Name = "ZoneUpdt",
                            NormalizedName = "ZoneUpdt"
                        },
                        new
                        {
                            Id = "323d80ec-131d-4e16-8900-faa6f0368a05",
                            ConcurrencyStamp = "7bb825c5-792c-4d2b-8804-5c6567e1f4d3",
                            Name = "ZoneDlet",
                            NormalizedName = "ZoneDlet"
                        },
                        new
                        {
                            Id = "94ce159b-f90a-49bf-97b6-26d52d76de5f",
                            ConcurrencyStamp = "f05cf539-de3f-4843-8588-d9da37e893c3",
                            Name = "AgenceCreat",
                            NormalizedName = "AgenceCreat"
                        },
                        new
                        {
                            Id = "75b185ba-4e98-477f-b9ec-c18ac990e6b5",
                            ConcurrencyStamp = "e00e2a26-1f8e-44e3-809a-ad2a08e0dae6",
                            Name = "AgenceRead",
                            NormalizedName = "AgenceRead"
                        },
                        new
                        {
                            Id = "2079eaac-dd90-45b3-96fe-cf89454f62c1",
                            ConcurrencyStamp = "14b3772d-2409-465b-9954-949538be500b",
                            Name = "AgenceUpdt",
                            NormalizedName = "AgenceUpdt"
                        },
                        new
                        {
                            Id = "258b8747-801a-482d-959c-3f3c89b0096d",
                            ConcurrencyStamp = "992c9796-2229-4e42-8c8a-9cada7c91810",
                            Name = "AgenceDlet",
                            NormalizedName = "AgenceDlet"
                        },
                        new
                        {
                            Id = "083fb77b-c657-4d91-9b1e-f69ed0fd01d2",
                            ConcurrencyStamp = "adf843a5-1ff5-4fca-b281-c6a9b543f056",
                            Name = "AdresseCreat",
                            NormalizedName = "AdresseCreat"
                        },
                        new
                        {
                            Id = "0499cd0a-1d3d-486a-b31a-a53313947b3c",
                            ConcurrencyStamp = "093036e8-9e5d-4db1-b860-2e001893c744",
                            Name = "AdresseRead",
                            NormalizedName = "AdresseRead"
                        },
                        new
                        {
                            Id = "74eefd9f-02a1-4efe-977f-47a7ba44c32f",
                            ConcurrencyStamp = "d68fe02f-106d-445b-8b8f-fb19c695c922",
                            Name = "AdresseUpdt",
                            NormalizedName = "AdresseUpdt"
                        },
                        new
                        {
                            Id = "816aaba6-9562-4781-b8c4-aed89f256b94",
                            ConcurrencyStamp = "dd2736d4-3225-4e30-9b15-460728956a46",
                            Name = "AdresseDlet",
                            NormalizedName = "AdresseDlet"
                        },
                        new
                        {
                            Id = "6448ca0e-71ac-488d-b06e-8523230479c6",
                            ConcurrencyStamp = "81499670-066e-46de-8d03-b48639bf029a",
                            Name = "CourseCreat",
                            NormalizedName = "CourseCreat"
                        },
                        new
                        {
                            Id = "655ffac2-5e91-4ed2-b5da-c6ed08b6a36d",
                            ConcurrencyStamp = "e5769292-447c-46d5-97e6-a68f5db5054e",
                            Name = "CourseRead",
                            NormalizedName = "CourseRead"
                        },
                        new
                        {
                            Id = "2a05b3ff-16e9-493e-b4a6-5dad27044534",
                            ConcurrencyStamp = "63aa1c09-2951-44f4-83e2-0cafea3dd366",
                            Name = "CourseUpdt",
                            NormalizedName = "CourseUpdt"
                        },
                        new
                        {
                            Id = "2e484cb3-7118-48ee-86aa-56072cff74a3",
                            ConcurrencyStamp = "757a07b6-d806-44b7-aebd-d756ca7814f3",
                            Name = "CourseDlet",
                            NormalizedName = "CourseDlet"
                        },
                        new
                        {
                            Id = "d43ab8b6-51ea-407c-a91b-c11a9a0aeb05",
                            ConcurrencyStamp = "74e216fa-a275-4d99-b7d1-f23f69d491db",
                            Name = "TourneeCreat",
                            NormalizedName = "TourneeCreat"
                        },
                        new
                        {
                            Id = "6bc232d0-47a8-466a-aec1-a78ad76b6a87",
                            ConcurrencyStamp = "9d8c9e54-be5e-4e6e-be78-a2b40a747a12",
                            Name = "TourneeRead",
                            NormalizedName = "TourneeRead"
                        },
                        new
                        {
                            Id = "ad697b99-8515-47c4-abd9-41bd6ed9f8c8",
                            ConcurrencyStamp = "a933bd60-c3f2-4477-a13b-0f0d48f12329",
                            Name = "TourneeUpdt",
                            NormalizedName = "TourneeUpdt"
                        },
                        new
                        {
                            Id = "5e63715b-7bce-468d-91a6-480f94124833",
                            ConcurrencyStamp = "28b3e004-98e4-46f6-894c-962b35a19337",
                            Name = "TourneeDlet",
                            NormalizedName = "TourneeDlet"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ForceT.Shared.Models.Profil", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("profilId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Profil");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("ForceT.Shared.Models.Profil", null)
                        .WithMany("Roles")
                        .HasForeignKey("ProfilId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
