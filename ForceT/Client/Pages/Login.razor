@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager



@if (hidden)
{
    <div class="page login-page">
        <div class="container-fluid">
            <div class="form-outer text-center d-flex align-items-center">
                <div class="form-inner">
                    <div class="logo text-uppercase"><span>Force</span><strong class="text-primary">Tracking</strong></div>
                    <hr />
                   @if (ShowErrors)
                    {
                        <div class="alert alert-danger" role="alert">
                            <p>@Error</p>
                        </div>
                    }
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <div style="font-size:15px">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                        </div>
                        <div class="form-group-material">
                            <InputText id="username" name="username" class="input-material" @bind-Value="loginModel.Name" />
                            <label for="login-username" class="label-material active" onfocus="labelfocus()">Nom d'utilisateur</label>
                            <div style="font-size:12px">
                                <ValidationMessage For="@(() => loginModel.Name)" />
                            </div>
                        </div>
                        <div class="form-group-material">
                            <InputText type="password" id="password" name="password" class="input-material" @bind-Value="loginModel.Password" />
                            <label for="login-password" class="label-material active" onfocus="labelfocus()">Mot de passe</label>
                            <div style="font-size:12px">
                                <ValidationMessage For="@(() => loginModel.Password)" />
                            </div>
                        </div>
                        <div class="form-group text-center">
                            <button type="submit" class="btn btn-success">Connexion</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@if (!hidden)
{
    <Annimation />
}

@code {

    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";
    private bool hidden = true;

    private async Task HandleLogin()
    {
        ShowErrors = false;
        hidden = false;
        //await Task.Delay(10000);

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
            hidden = true;
        }
        else
        {
            hidden = true;
            Error = result.Error;
            ShowErrors = true;
        }
    }

}
