@page "/creationentstock"

@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="card" style="border-radius:10px">
    <div class="card-header" style="border-radius:10px">
        <h3>Entrée stock</h3>
    </div>
    <div class="card-body">
        <div class="confluid">
            <EditForm Model="EntJl" OnValidSubmit="Addrow">
                <div class="row">
                    <div class="col-3" style="min-width:280px">
                        <div class="form-group">
                            <label>Code produit :</label>
                            <BlazoredTypeahead SearchMethod="SearchCode" @bind-Value="EntJl.produit" EnableDropDown="true" class="input-group">
                                <SelectedTemplate Context="produit">
                                    @produit.CodeArticle
                                </SelectedTemplate>
                                <ResultTemplate Context="produit">
                                    @produit.CodeArticle <strong>    @produit.Designation </strong>
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>
                    <div class="col-3" style="min-width:280px">
                        <div class="form-group">
                            <label>Designation :</label>
                            <BlazoredTypeahead SearchMethod="SearchDesignation" @bind-Value="EntJl.produit" EnableDropDown="true">
                                <SelectedTemplate Context="produit">
                                    @produit.Designation
                                </SelectedTemplate>
                                <ResultTemplate Context="produit">
                                    @produit.Designation <strong> by @produit.Designation </strong>
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>
                    <div class="col-4" style="min-width:200px">
                        <div class="row">
                            <div class="col-3" style="min-width:150px">
                                <div class="form-group">
                                    <label>Quantité :</label>
                                    <MyInputNumber type="text" class="mr-3 form-control" @bind-Value="EntJl.Qte" />
                                </div>
                            </div>
                            <div class="col-1">
                                <button type="submit" class="btn btn-success" style="margin-top:32px">
                                    <i class="oi oi-grid-three-up"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>

            @if (ShowErrors)
            {
                <div class="alert alert-danger" role="alert" style="height:20px; font-size:14px ;box-sizing:content-box">
                    <p>@Error</p>
                </div>
            }

            <table id="EntTable" class="table table-bordered table-responsive-sm">
                <thead class="thead-light">
                    <tr>
                        <th style="min-width:130px">Code produit</th>
                        <th style="min-width:110px">Description</th>
                        <th style="min-width:90px">Quantité</th>
                    </tr>
                </thead>
                @if (EntJls != null)
                {
                    <tbody>
                        @foreach (var entjl in EntJls)
                        {
                            <tr>
                                <td>@entjl.produit.CodeArticle</td>
                                <td>@entjl.produit.Designation</td>
                                <td>@entjl.Qte</td>
                                <td style="width:50px">
                                    <button class="btn-grid btn-Gridsup" @onclick="(()=>Removerow(entjl))">
                                        <i class="oi oi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                }
            </table>
            <div class="form-group text-center">
                @if (wait)
                {
                    <button type="submit" class="btn btn-success">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Ajouter...
                    </button>
                }
                else
                {
                    <button type="submit" class="btn btn-success" @onclick="Addent">Ajouter</button>
                }
            </div>
        </div>
    </div>
</div>


@code {
    string Error;
    bool ShowErrors = false;
    Adresse adr = new Adresse();
    List<Produit> produits;
    Produit produit = new Produit();
    private bool wait = false;
    bool show = false;
    Pan pan = new Pan();
    List<Pan> pans = new List<Pan>();
    List<JournalStock> EntJls = new List<JournalStock>();
    JournalStock EntJl = new JournalStock();

    protected override async Task OnInitializedAsync()
    {
        await GetProduit();
    }

    private async Task<List<Produit>> GetProduit()
    {
        HttpResponseMessage response;
        response = await Http.GetAsync("api/Produits");
        if (response.IsSuccessStatusCode)
        {
            string jsonContent = response.Content.ReadAsStringAsync().Result;
            produits = JsonConvert.DeserializeObject<List<Produit>>(jsonContent);
        }
        else
        {
            Console.WriteLine(response.StatusCode);
        }
        return produits;
    }

    private async Task<IEnumerable<Produit>> SearchCode(string searchText)
    {
        if (produits == null)
        {
            await GetProduit();
        }
        return await Task.FromResult(produits.Where(x => x.CodeArticle.ToLower().Contains(searchText.ToLower())).ToList());

    }

    private async Task<IEnumerable<Produit>> SearchDesignation(string searchText)
    {
        if (produits == null)
        {
            await GetProduit();
        }
        return await Task.FromResult(produits.Where(x => x.Designation.ToLower().Contains(searchText.ToLower())).ToList());
        //|| x.Author.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task Addent()
    {
       
    }

    private async Task Addrow()
    {
        if (EntJl.produit == null || EntJl.produit.Designation == null || EntJl.Qte == 0) return;
        if (EntJls.Exists(x => x.produit == EntJl.produit))
        {
            Error = "Vous avez déja ajouté ce produit";
            ShowErrors = true;
            await Task.Delay(5000);
            ShowErrors = false;
            return;
        }
        EntJls.Add(new JournalStock { produit = EntJl.produit, Qte = EntJl.Qte});
    }

    private async Task Removerow(JournalStock entjl)
    {
        EntJls.Remove(entjl);
    }

    public class Pan
    {
        public Produit Prod { get; set; }
        public int Qte { get; set; }
    }
}
