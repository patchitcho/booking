@page "/produit"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<div class="card" style="border-radius:10px">
    <div class="card-header" style="border-radius:10px">
        <h3>Liste des produits</h3>
    </div>
    <div class="card-body">
        <p>
            <a href="CreationProduit">Créer un nouveau produit</a>
        </p>
        @if (produits == null)
        {
            <Annimation />
        }
        else
        {
            <div class="row">
                <div class="col-md-12">
                    <BlazorDataGrid Items="@produits" ShowTotalResult="true" TableClass="table table-hover table-bordered table-responsive-xl"
                                    TheadClass="thead-light" Translation="@translate" ShowPageSelector="true" PageSelector="@PageSelector" PageSize="10">
                        <BlazorDataGridColumn>
                            <DataGridColumn Items="@produits" ColumnName="CodeArticle" DisplayColumnName="Code Article" Filter="true" ThStyle="width:33%"></DataGridColumn>
                            <DataGridColumn Items="@produits" ColumnName="Designation" DisplayColumnName="Designation" Filter="true" ThStyle="width:33%"></DataGridColumn>
                            <DataGridColumn Items="@produits" ColumnName="Prix" DisplayColumnName="Prix" Filter="true" ThStyle="width:33%"></DataGridColumn>
                        </BlazorDataGridColumn>
                        <GridRow>
                            <td>@context.CodeArticle</td>
                            <td>@context.Designation</td>
                            <td>@context.Prix</td>
                            <td style="min-width:80px ;max-width:80px ;padding:0.5rem !important">
                                <div style="align-content:center">
                                    <button class="btn-grid btn-Gridedit" @onclick="(() => PrepareForEdit(context))" data-toggle="modal" data-target="#DetailProduit">
                                        <i class="oi oi-document"></i>
                                    </button>
                                    <button class="btn-grid btn-Gridsup" @onclick="(() => PrepareForDelete(context))" data-toggle="modal" data-target="#confirmDeleteModal">
                                        <i class="oi oi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </GridRow>
                    </BlazorDataGrid>
                </div>
            </div>
            <DetailProduit produit="produit" DataChanged="@DataChanged"></DetailProduit>
            <ConfirmDialog OnClick="@Delete" />
        }
    </div>
</div>


@code {

    Produit[] produits;
    Produit produit = new Produit();
    private bool hidden = false;
    string adr;
    private Dictionary<string, string> translate = new Dictionary<string, string>
{
        {"next", "Suivant" },
        {"previous", "Precedant" },
        {"pages", "Page __curpage__ de __totalpages__" },
        {"totalresult", "__totalcount__ ligne" },
        {"totalresultplural", "__totalcount__ lignes"},
        {"filteredresults", "__filteredcount__ result de __totalcount__ lignes" },
        {"filteredresultsplural", "__filteredcount__ results de __totalcount__ lignes"  },
        {"selector", "lignes par page" }
    };
    private Dictionary<string, int> PageSelector = new Dictionary<string, int>
{
        {"5", 5 },
        {"10", 10 },
        {"20", 20 },
        {"30", 30 },
        {"Tout", 0 }
    };

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response;
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Produits";
        //adresses = await AuthService.GetJsonAsync<Adresse[]>(new Uri(adr21));
        //try
        //{
        response = await Http.GetAsync("api/Produits");
        //response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            string jsonContent = response.Content.ReadAsStringAsync().Result;
            adr = response.StatusCode.ToString();
            //adresses = await JsonSerializer.DeserializeAsync<Adresse[]>(responseContent);
            produits = JsonConvert.DeserializeObject<Produit[]>(jsonContent);
        }
        else
        {
            Console.WriteLine(response.StatusCode);
        }
    }

    private void PrepareForEdit(Produit produitedit)
    {
        produit = produitedit;
    }

    private void PrepareForDelete(Produit produitdelete)
    {
        produit = produitdelete;
    }

    private async void DataChanged()
    {
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Produits";
        produits = await AuthService.GetJsonAsync<Produit[]>(new Uri(adr21));
        StateHasChanged();
    }

    private async Task Delete()
    {
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Produits/" + produit.ProduitId;
        var task = await AuthService.DeleteJsonAsync(new Uri(adr21));
        await JSRuntime.InvokeAsync<object>("JsFunctions.CloseModal", "confirmDeleteModal");
        DataChanged();
        produit = new Produit();
    }

}