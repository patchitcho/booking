@page "/creationadresse"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using System.Diagnostics
@inject IJSRuntime JSRuntime


<div class="card" style="border-radius:10px">
    <div class="card-header" style="border-radius:10px">
        <h3>Création d'une adresse</h3>
    </div>
    <div class="card-body">
        <EditForm Model="adresse" OnValidSubmit="Creeradresse">
            <div style="font-size:15px">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="societe">Societé :</label>
                        <InputText placeholder="Societé" class="form-control" @bind-Value="adresse.Societé" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Societé)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="nom">Nom :</label>
                        <InputText placeholder="Nom" class="form-control" @bind-Value="adresse.Nom" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Nom)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="prenom">Prénom :</label>
                        <InputText placeholder="Prénom" class="form-control" @bind-Value="adresse.Prenom" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Prenom)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="adresse">Adresse :</label>
                        <InputTextArea placeholder="Adresse" class="form-control" @bind-Value="adresse.Adress" @onfocusout="@(()=>GetLatLngLiteral(adresse.Adress))" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Adress)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="ville">Ville :</label>
                        <InputText placeholder="Ville" class="form-control" @bind-Value="adresse.Ville" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Ville)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="Code">Code postale :</label>
                        <MyInputNumber placeholder="Code postale" class="form-control" @bind-Value="adresse.Codepostale" ParsingErrorMessage="Vous devez saisir le code postale" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Codepostale)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="type">Type :</label>
                        <InputText placeholder="Type" class="form-control" @bind-Value="adresse.Type" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Type)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="comment">Commentaire :</label>
                        <InputTextArea placeholder="Commentaire" class="form-control" @bind-Value="adresse.Commentaire" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Commentaire)" />
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div style="margin-top:30px; height:482px">
                        <div id="map" style="border:solid; border-color:#ced4da; border-width:1px;height:472px">
                        @*<GoogleMap Height="472" @ref="@map1" Id="map1" Options="@mapOptions"></GoogleMap>*@
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="tel">Téléphone :</label>
                        <MyInputNumber placeholder="Téléphone" class="form-control" @bind-Value="adresse.Telephone" ParsingErrorMessage="Vous devez saisir le n° de téléphone" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Telephone)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="email">Email :</label>
                        <InputText placeholder="Email" class="form-control" @bind-Value="adresse.Email" />
                        <div style="font-size:12px">
                            <ValidationMessage For="@(() => adresse.Email)" />
                        </div>
                    </div>

                </div>
            </div>
            <div class="form-group text-center">
                @if (wait)
                {
                    <button type="submit" class="btn btn-success">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Ajouter...
                    </button>
                }
                else
                {
                    <button type="submit" class="btn btn-success">Ajouter</button>
                }
            </div>
        </EditForm>
    </div>
</div>


@code {

    Adresse adresse = new Adresse();
    private bool wait = false;
    bool show = false;
    private GoogleMap map1;
    private MapOptions mapOptions;
    private string _durationTotalString;
    private string _distanceTotalString;
    private DirectionsRenderer dirRend;

    protected override async Task OnInitializedAsync()
    {
        //mapOptions = new MapOptions()
        //{
        //    Zoom = 13,
        //    Center = new LatLngLiteral()
        //    {
        //        Lat = 36.1854234,
        //        Lng = 5.424118
        //    },
        //    MapTypeId = MapTypeId.Roadmap
        //};
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("JsFunctions.initialize", null);
            StateHasChanged();
        }

    }

    //protected override bool ShouldRender()
    //{
    //    return false;
    //}


    //private async Task OnAfterMapInit()
    //{
    //    await map1.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));
    //}

    private async Task Creeradresse()
    {
        wait = true;
        string adresseContent = JsonConvert.SerializeObject(adresse);
        var response = await Http.PostAsync("api/Adresses", new StringContent(adresseContent, Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/adresse");
            wait = false;
        }
        else
        {
            Console.WriteLine(response.StatusCode);
        }
    }

    private async Task GetLatLngLiteral(string oussama)
    {
        if (oussama == null) return;
        //string oussama = "MINI MARKET OUSSAMA, Sétif";
        var pos = await JSRuntime.InvokeAsync<GeoLocation>("JsFunctions.geocodeAddress",oussama);
        GeoLocation geo = new GeoLocation();
        adresse.Latitude = pos.Lat;
        adresse.Longitude = pos.Lng;
        Console.WriteLine(pos.Lat.ToString() + "  " + pos.Lng.ToString());
    }

    public class GeoLocation
    {
        public double Lat { get; set; }
        public double Lng { get; set; }
    }

}
