@page "/adresse"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<div class="card" style="border-radius:10px">
    <div class="card-header" style="border-radius:10px">
        <h3>Liste des adresses</h3>
    </div>
    <div class="card-body">
        <p>
            <a href="CreationAdresse">Créer une nouvelle adresse</a>
        </p>
        @if (adresses == null)
        {
            <Annimation />
        }
        else
        {
            <div class="confluid">
                <table id="indexzone" class="table table-bordered table-responsive-xl">
                    <thead>
                        <tr>
                            <th>Societé</th>
                            <th>Nom</th>
                            <th>Téléphone</th>
                            <th>Adresse</th>
                            <th>Ville</th>
                            <th>Code postale</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var adresse in adresses)
                        {
                            <tr>
                                <td>@adresse.Societé</td>
                                <td>@adresse.Nom</td>
                                <td>@adresse.Telephone</td>
                                <td>@adresse.Adress</td>
                                <td>@adresse.Ville</td>
                                <td>@adresse.Codepostale</td>
                                <td>@adresse.Type</td>
                                <td style="width:100px"><input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(adresse))" data-toggle="modal" data-target="#DetailAdresse" value="Editer" /></td>
                                <td style="width:100px"><input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(adresse))" data-toggle="modal" data-target="#confirmDeleteModal" value="Supprimer" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <DetailAdresse adresse="adresse" DataChanged="@DataChanged"></DetailAdresse>
            <ConfirmDialog OnClick="@Delete" />
        }
    </div>
</div>




@code {

    Adresse[] adresses;
    Adresse adresse = new Adresse();
    private bool hidden = false;
    string adr;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response;
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Adresses";
        //adresses = await AuthService.GetJsonAsync<Adresse[]>(new Uri(adr21));
        //try
        //{
        response = await Http.GetAsync("api/Adresses");
        //response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            string jsonContent = response.Content.ReadAsStringAsync().Result;
            adr = response.StatusCode.ToString();
            //adresses = await JsonSerializer.DeserializeAsync<Adresse[]>(responseContent);
            adresses = JsonConvert.DeserializeObject<Adresse[]>(jsonContent);
        }
        else
        {
            Console.WriteLine(response.StatusCode);
        }
    }

    private void PrepareForEdit(Adresse adresseedit)
    {
        adresse = adresseedit;
    }

    private void PrepareForDelete(Adresse adressedelete)
    {
        adresse = adressedelete;
    }

    private async void DataChanged()
    {
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Adresses";
        adresses = await AuthService.GetJsonAsync<Adresse[]>(new Uri(adr21));
        StateHasChanged();
    }

    private async Task Delete()
    {
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Adresses/" + adresse.AdresseId;
        var task = await AuthService.DeleteJsonAsync(new Uri(adr21));
        await JSRuntime.InvokeAsync<object>("JsFunctions.CloseModal", "confirmDeleteModal");
        DataChanged();
        adresse = new Adresse();
    }
}