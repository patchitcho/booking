@page "/fetchdata"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (zones == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BlazorDataGrid Items="@zones" ShowTotalResult="true" TheadClass="thead-dark" Translation="@translate"
                    ShowPageSelector="true" PageSelector="@PageSelector">
        <BlazorDataGridColumn>
            <DataGridColumn Items="@zones" ColumnName="zoneId" Filter="true"><strong>Date</strong></DataGridColumn>
            <DataGridColumn Items="@zones" ColumnName="zone" DisplayColumnName="TemperatureC" DropdownFilter="true"></DataGridColumn>
            <DataGridColumn Items="@zones" ColumnName="ville" DisplayColumnName="TemperatureF" Filter="true"></DataGridColumn>
            <DataGridColumn Items="@zones" ColumnName="codepostal" DisplayColumnName="Summary" Filter="true"></DataGridColumn>
        </BlazorDataGridColumn>
        <GridRow>
            <td>@context.zoneId</td>
            <td>@context.zone</td>
            <td>@context.ville</td>
            <td>@context.codepostal</td>
        </GridRow>
    </BlazorDataGrid>
}

@code {
    Zone[] zones;
    Zone zone = new Zone();
    private bool hidden = false;
    string adr;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response;
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Zones";

        response = await Http.GetAsync("api/Zones");

        if (response.IsSuccessStatusCode)
        {
            string jsonContent = response.Content.ReadAsStringAsync().Result;
            adr = response.StatusCode.ToString();
            //zones = await JsonSerializer.DeserializeAsync<Zone[]>(responseContent);
            zones = JsonConvert.DeserializeObject<Zone[]>(jsonContent);
        }
        else
        {
            adr = response.RequestMessage.ToString();
        }
        //await JSRuntime.InvokeAsync<string>("TestDataTablesAdd", new string[] { "#indexzone" });
    }

    private Dictionary<string, string> translate = new Dictionary<string, string>
{
        {"next", "Suivant" },
        {"previous", "Precedant" },
        {"pages", "Page __curpage__ de __totalpages__" },
        {"totalresult", "__totalcount__ ligne" },
        {"totalresultplural", "__totalcount__ lignes"},
        {"filteredresults", "__filteredcount__ result de __totalcount__ lignes" },
        {"filteredresultsplural", "__filteredcount__ results de __totalcount__ lignes"  },
        {"selector", "lignes par page" }
    };

    private Dictionary<string, int> PageSelector = new Dictionary<string, int>
{
        {"5", 5 },
        {"10", 10 },
        {"20", 20 },
        {"30", 30 },
        {"Tout", 0 }
    };

}
