@page "/stock"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JSRuntime




<div class="card" style="border-radius:10px">
    <div class="card-header" style="border-radius:10px">
        <h3>Liste des produits</h3>
    </div>
    <div class="card-body">
        <p>
            <a href="CreationProduit">Créer une nouvelle entrée</a>
        </p>
        @if (stock == null)
        {
            <Annimation />
        }
        else
        {
            <div class="row">
                <div class="col-md-12">
                    <BlazorDataGrid Items="@stock" ShowTotalResult="true" TableClass="table table-hover table-bordered table-responsive-xl"
                                    TheadClass="thead-light" Translation="@translate" ShowPageSelector="true" PageSelector="@PageSelector" PageSize="10">
                        <BlazorDataGridColumn>
                            <DataGridColumn Items="@stock" ColumnName="CodeArticle" DisplayColumnName="Code Article" Filter="true"></DataGridColumn>
                            <DataGridColumn Items="@stock" ColumnName="Designation" DisplayColumnName="Designation" Filter="true"></DataGridColumn>
                            <DataGridColumn Items="@stock" ColumnName="Prix" DisplayColumnName="Prix" Filter="true"></DataGridColumn>
                            <DataGridColumn Items="@stock" ColumnName="Quantite" DisplayColumnName="Quantité" Filter="true"></DataGridColumn>
                        </BlazorDataGridColumn>
                        <GridRow>
                            <td>@context.produit.CodeArticle</td>
                            <td>@context.produit.Designation</td>
                            <td>@context.produit.Prix</td>
                            <td>@context.Quantite</td>
                        </GridRow>
                    </BlazorDataGrid>
                </div>
            </div>
        }
    </div>
</div>




@code {

    StockInterne[] stock;
    StockInterne lignestock = new StockInterne();
    private bool hidden = false;
    string adr;

     private Dictionary<string, string> translate = new Dictionary<string, string>
{
        {"next", "Suivant" },
        {"previous", "Precedant" },
        {"pages", "Page __curpage__ de __totalpages__" },
        {"totalresult", "__totalcount__ ligne" },
        {"totalresultplural", "__totalcount__ lignes"},
        {"filteredresults", "__filteredcount__ result de __totalcount__ lignes" },
        {"filteredresultsplural", "__filteredcount__ results de __totalcount__ lignes"  },
        {"selector", "lignes par page" }
    };

    private Dictionary<string, int> PageSelector = new Dictionary<string, int>
{
        {"5", 5 },
        {"10", 10 },
        {"20", 20 },
        {"30", 30 },
        {"Tout", 0 }
    };

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response;
        string adr21 = NavigationManager.BaseUri.ToString() + "api/StockInternes";
        //adresses = await AuthService.GetJsonAsync<Adresse[]>(new Uri(adr21));
        //try
        //{
        response = await Http.GetAsync("api/StockInternes");
        //response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            string jsonContent = response.Content.ReadAsStringAsync().Result;
            adr = response.StatusCode.ToString();
            //adresses = await JsonSerializer.DeserializeAsync<Adresse[]>(responseContent);
            stock = JsonConvert.DeserializeObject<StockInterne[]>(jsonContent);
        }
        else
        {
            Console.WriteLine(response.StatusCode);
        }
        //}
        //catch (Exception e)
        //{
        //    adr = e.Message;
        //}
    }
}