@page "/creationtournee"
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager NavigationManager



<div class="card" style="border-radius:10px">
    <div class="card-header" style="border-radius:10px">
        <h3>Création d'une nouvelle tournée</h3>
    </div>
    <EditForm Model="tournee" OnValidSubmit="Creertournee">
        <div style="font-size:15px">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
        <div class="card-body">
            <div class="form-group">
                <label for="nom">Libellé de la tournée :</label>
                <InputText placeholder="Libellé de la tournée" class="form-control" @bind-Value="tournee.Libellé" />
                <div style="font-size:12px">
                    <ValidationMessage For="@(() => tournee.Libellé)" />
                </div>
            </div>
            <div class="form-group">
                <label for="date">Date prévu :</label>
                <InputDate placeholder="Date de la tournée" class="form-control" @bind-Value="tournee.Date_tournee" />
                <div style="font-size:12px">
                    <ValidationMessage For="@(() => tournee.Date_tournee)" />
                </div>
            </div>
            <div class="form-group">
                <label for="type">Type :</label>
                <InputText placeholder="Type" class="form-control" @bind-Value="tournee.Type"  />
                <div style="font-size:12px">
                    <ValidationMessage For="@(() => tournee.Type)" />
                </div>
            </div>
            <div class="form-group text-center">
                @if (wait)
                {
                    <button type="submit" class="btn btn-success">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Ajouter...
                    </button>
                }
                else
                {
                    <button type="submit" class="btn btn-success">Ajouter</button>
                }
            </div>
        </div>
    </EditForm>
</div>


@code {

    Tournee tournee = new Tournee();
    private bool wait = false;


    private async Task Creertournee()
    {
        //ShowErrors = false;
        wait = true;
        //await Task.Delay(10000);

        //Uri crzone = new Uri("api/Tournees");
        //var result = await AuthService.PostJsonAsync<Tournee>(crzone,zone);

        //var zoneasjson = JsonSerializer.Serialize(Tournee);
        string tourneeContent = JsonConvert.SerializeObject(tournee);
        var response = await Http.PostAsync("api/Tournees",new StringContent(tourneeContent, Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/tournee");
            wait = false;
        }
        else
        {
            //    Error = result.Error;
            //    ShowErrors = true;
            response.StatusCode.ToString();
        }
    }
}
