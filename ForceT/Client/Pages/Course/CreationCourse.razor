@page "/creationcourse"
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager NavigationManager



    <div class="card" style="border-radius:10px">
        <div class="card-header" style="border-radius:10px">
            <h3>Création d'une course</h3>
        </div>
        <EditForm Model="course" OnValidSubmit="Creercourse">
            <div style="font-size:15px">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="Zone">Adresse d'enlévement :</label>
                    <InputText placeholder="Adresse d'enlévement" class="form-control" @bind-Value="course.Adressenlevement" />
                    <div style="font-size:12px">
                        <ValidationMessage For="@(() => course.Adressenlevement)" />
                    </div>
                </div>
                <div class="form-group">
                    <label for="Ville">Adresse de livraison :</label>
                    <InputText placeholder="Adresse de livraison" class="form-control" @bind-Value="course.Adresslivraison" />
                    <div style="font-size:12px">
                        <ValidationMessage For="@(() => course.Adresslivraison)" />
                    </div>
                </div>
                <div class="form-group text-center">
                    @if (wait)
                    {
                        <button type="submit" class="btn btn-success">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Ajouter...
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-success">Ajouter</button>
                    }
                </div>
            </div>
        </EditForm>
    </div>


@code {

    Course course = new Course();
    private bool wait = false;


    private async Task Creercourse()
    {
        //ShowErrors = false;
        wait = true;
        //await Task.Delay(10000);

        //Uri crzone = new Uri("api/Courses");
        //var result = await AuthService.PostJsonAsync<Course>(crzone,course);

        //var zoneasjson = JsonSerializer.Serialize(course);
        string courseContent = JsonConvert.SerializeObject(course);
        var response = await Http.PostAsync("api/Courses",new StringContent(courseContent, Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/course");
            wait = false;
        }
        else
        {
            //    Error = result.Error;
            //    ShowErrors = true;
            response.StatusCode.ToString();
        }
    }
}
