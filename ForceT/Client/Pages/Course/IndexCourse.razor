@page "/course"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JSRuntime




<div class="card" style="border-radius:10px">
    <div class="card-header" style="border-radius:10px">
        <h3>Liste des courses</h3>
    </div>
    <div class="card-body">
        <p>
            <a href="CreationCourse">Créer un nouvelle course</a>
        </p>
        @if (courses == null)
        {
            <Annimation />
        }
        else
        {
            <div class="confluid">
                <table id="indexzone" class="table table-bordered table-responsive-xl">
                    <thead>
                        <tr>
                            <th>Adr d'enlevement</th>
                            <th>Adr de livraison</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var course in courses)
                        {
                            <tr>
                                <td>@course.Adressenlevement</td>
                                <td>@course.Adresslivraison</td>
                                <td style="width:100px"><input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(course))" data-toggle="modal" data-target="#DetailCourse" value="Editer" /></td>
                                <td style="width:100px"><input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(course))" data-toggle="modal" data-target="#confirmDeleteModal" value="Supprimer" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <DetailCourse course="course" DataChanged="@DataChanged"></DetailCourse>
            <ConfirmDialog OnClick="@Delete" />
        }
    </div>
</div>




@code {

    Course[] courses;
    Course course = new Course();
    private bool hidden = false;
    string adr;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response;
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Courses";
        //courses = await AuthService.GetJsonAsync<Course[]>(new Uri(adr21));
        //try
        //{
        response = await Http.GetAsync("api/Courses");
        //response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            string jsonContent = response.Content.ReadAsStringAsync().Result;
            adr = response.StatusCode.ToString();
            //courses = await JsonSerializer.DeserializeAsync<Sondage[]>(responseContent);
            courses = JsonConvert.DeserializeObject<Course[]>(jsonContent);
        }
        else
        {
            adr = response.RequestMessage.ToString();
        }
        //}
        //catch (Exception e)
        //{
        //    adr = e.Message;
        //}
    }

    private void PrepareForEdit(Course courseedit)
    {
        course = courseedit;
    }
    private void PrepareForDelete(Course coursedelete)
    {
        course = coursedelete;
    }

    private async void DataChanged()
    {
        string adr21 = NavigationManager.BaseUri.ToString() + "api/courses";
        courses = await AuthService.GetJsonAsync<Course[]>(new Uri(adr21));
        StateHasChanged();
    }

    private async Task Delete()
    {
        string adr21 = NavigationManager.BaseUri.ToString() + "api/Courses/" + course.CourseId;
        var task = await AuthService.DeleteJsonAsync(new Uri(adr21));
        await JSRuntime.InvokeAsync<object>("JsFunctions.CloseModal", "confirmDeleteModal");
        DataChanged();
        course = new Course();
    }
}