// <auto-generated />
using System;
using Proxima.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Proxima.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191223210339_iden1")]
    partial class iden1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Proxima.Server.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "69c2620c-5b13-47d3-9f5e-fff5370bd8c2",
                            ConcurrencyStamp = "81c9403b-d4cd-4edb-8929-440aad2ae209",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4d9e7d2d-65ed-4620-8898-c4bfe8600e63",
                            ConcurrencyStamp = "5b342b11-13ee-4221-8b4d-c161f663996f",
                            Name = "VehiculeCreat",
                            NormalizedName = "VehiculeCreat"
                        },
                        new
                        {
                            Id = "cb50b92d-417c-443c-b06d-e245cda807ed",
                            ConcurrencyStamp = "62b7839d-9c1b-40eb-8f6c-4b162916bd35",
                            Name = "VehiculeRead",
                            NormalizedName = "VehiculeRead"
                        },
                        new
                        {
                            Id = "c3d82a71-c0cd-4420-adb1-225e349e14a9",
                            ConcurrencyStamp = "0779906f-ea2b-416a-9f2d-0ab7129af866",
                            Name = "VehiculeUpdt",
                            NormalizedName = "VehiculeUpdt"
                        },
                        new
                        {
                            Id = "207562aa-bfe6-475d-b9eb-c0e0600704ed",
                            ConcurrencyStamp = "1e77cd9d-a17a-4965-887a-3c84dade92f6",
                            Name = "VehiculeDlet",
                            NormalizedName = "VehiculeDlet"
                        },
                        new
                        {
                            Id = "80aeb289-858a-4e17-be4c-bf2665162068",
                            ConcurrencyStamp = "da09a1e8-eb18-44d2-acb2-0dd7242523c3",
                            Name = "SondageCreat",
                            NormalizedName = "SondageCreat"
                        },
                        new
                        {
                            Id = "efbb2427-b17f-43ca-be5b-b5ce00ca96eb",
                            ConcurrencyStamp = "9a404fe4-bc20-46ae-b707-0bac1874dd96",
                            Name = "SondageRead",
                            NormalizedName = "SondageRead"
                        },
                        new
                        {
                            Id = "8d0d3cb6-c823-43d6-9c86-ba0217198f32",
                            ConcurrencyStamp = "4eeddb68-3eba-40fc-9141-e39e8a5a18ad",
                            Name = "SondageUpdt",
                            NormalizedName = "SondageUpdt"
                        },
                        new
                        {
                            Id = "c92c7326-d847-4e38-963d-47377d5651d8",
                            ConcurrencyStamp = "39ba1ce5-c669-4eab-97ac-15af69dd32d8",
                            Name = "SondageDlet",
                            NormalizedName = "SondageDlet"
                        },
                        new
                        {
                            Id = "7b6a59f4-47e5-4779-89d9-506828955e0a",
                            ConcurrencyStamp = "abd6dacc-395a-4d51-bb5a-d6b6c3511807",
                            Name = "ZoneCreat",
                            NormalizedName = "ZoneCreat"
                        },
                        new
                        {
                            Id = "a7c94eae-d5f7-4de1-8a4e-35e6966e93e0",
                            ConcurrencyStamp = "bb99b0dd-ab37-4b50-ab58-3c23093faebe",
                            Name = "ZoneRead",
                            NormalizedName = "ZoneRead"
                        },
                        new
                        {
                            Id = "e710f164-f5ee-409f-bf4c-0e8eb7f86faa",
                            ConcurrencyStamp = "0ae662eb-3a77-49e6-8cc0-dff36d783816",
                            Name = "ZoneUpdt",
                            NormalizedName = "ZoneUpdt"
                        },
                        new
                        {
                            Id = "376f6768-fd8a-49d7-b5c1-991fe1d6d700",
                            ConcurrencyStamp = "d863d05e-06ae-4b74-8622-cd8bbd065c8c",
                            Name = "ZoneDlet",
                            NormalizedName = "ZoneDlet"
                        },
                        new
                        {
                            Id = "fb0db5ea-8474-418e-aaa4-0f35a126f97c",
                            ConcurrencyStamp = "b77a1ec7-bf70-4bb7-8998-fc9d904c2932",
                            Name = "AgenceCreat",
                            NormalizedName = "AgenceCreat"
                        },
                        new
                        {
                            Id = "0044889a-e7d7-4b58-a128-1675638a83a2",
                            ConcurrencyStamp = "207ca19d-2c9a-4756-8854-d8cf39176c4a",
                            Name = "AgenceRead",
                            NormalizedName = "AgenceRead"
                        },
                        new
                        {
                            Id = "313e8ee5-84a6-495d-9ebf-79e7129b2fff",
                            ConcurrencyStamp = "3f507399-a42b-4dad-8d3e-f561f9721685",
                            Name = "AgenceUpdt",
                            NormalizedName = "AgenceUpdt"
                        },
                        new
                        {
                            Id = "b5545546-10e1-4625-ad10-6daf8c37848a",
                            ConcurrencyStamp = "5ef2e343-4ec7-42c4-b6c7-bdfb44cbcb99",
                            Name = "AgenceDlet",
                            NormalizedName = "AgenceDlet"
                        },
                        new
                        {
                            Id = "9d13d7b1-4304-4b3c-a347-16994952ee21",
                            ConcurrencyStamp = "63aa0863-af2c-4465-9245-73ec84d10f81",
                            Name = "AdresseCreat",
                            NormalizedName = "AdresseCreat"
                        },
                        new
                        {
                            Id = "037a1502-76d7-45cc-a7c5-79e0c8fe2291",
                            ConcurrencyStamp = "6fa980da-d17f-4608-88b5-7386af329ac9",
                            Name = "AdresseRead",
                            NormalizedName = "AdresseRead"
                        },
                        new
                        {
                            Id = "1d2a9f13-8e1b-44c8-81f2-1f7e76ce974d",
                            ConcurrencyStamp = "36e0c674-0800-4480-909e-0f96a52264f0",
                            Name = "AdresseUpdt",
                            NormalizedName = "AdresseUpdt"
                        },
                        new
                        {
                            Id = "40f46f9c-b0bb-4580-b910-3446209bf317",
                            ConcurrencyStamp = "d8e543e2-933f-4d51-a959-f60aadf04f05",
                            Name = "AdresseDlet",
                            NormalizedName = "AdresseDlet"
                        },
                        new
                        {
                            Id = "be82510e-97c1-44ef-95b9-3cb1a8f1bad3",
                            ConcurrencyStamp = "d0d3aa62-0767-41fe-988f-5ef8d2418f87",
                            Name = "CourseCreat",
                            NormalizedName = "CourseCreat"
                        },
                        new
                        {
                            Id = "7b172b78-5904-4947-aa06-1086a8257673",
                            ConcurrencyStamp = "56228f11-6669-47bb-896a-9314b431459d",
                            Name = "CourseRead",
                            NormalizedName = "CourseRead"
                        },
                        new
                        {
                            Id = "1e9daf8c-4c68-46ca-9050-cd172d233fb5",
                            ConcurrencyStamp = "799fdb6f-150c-4390-8c67-18e0774afc3e",
                            Name = "CourseUpdt",
                            NormalizedName = "CourseUpdt"
                        },
                        new
                        {
                            Id = "ce6ac039-3339-417d-8496-9166c0e2a5df",
                            ConcurrencyStamp = "7a43292d-e25a-48ae-8573-5ba46000fa63",
                            Name = "CourseDlet",
                            NormalizedName = "CourseDlet"
                        },
                        new
                        {
                            Id = "42809b08-20d2-407b-b195-b249170bd214",
                            ConcurrencyStamp = "a5aaa19d-1dfd-4338-9703-47d6ab0a73fd",
                            Name = "TourneeCreat",
                            NormalizedName = "TourneeCreat"
                        },
                        new
                        {
                            Id = "058ac7fe-6e0c-4791-aea9-7e490e19f43b",
                            ConcurrencyStamp = "a6cd5701-be32-4662-a8e4-590f228e0038",
                            Name = "TourneeRead",
                            NormalizedName = "TourneeRead"
                        },
                        new
                        {
                            Id = "1b794e51-8266-47d2-bb24-7ecf71852c36",
                            ConcurrencyStamp = "d47ae7e8-efd7-4c01-a77c-25ef78cbeda6",
                            Name = "TourneeUpdt",
                            NormalizedName = "TourneeUpdt"
                        },
                        new
                        {
                            Id = "0ade0a90-9403-42f9-b4f9-318383d06980",
                            ConcurrencyStamp = "c601287b-c2ea-42d5-b76b-290d719a09bc",
                            Name = "TourneeDlet",
                            NormalizedName = "TourneeDlet"
                        });
                });

            modelBuilder.Entity("Proxima.Server.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "7d392424-e2c6-434b-ac49-9bb33e8293be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd4ca31c-cb33-4125-a9d4-4264a6605768",
                            Email = "admin@Proximaracking.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ProximaRACKING.COM",
                            NormalizedUserName = "ADMINISTRATEUR",
                            PasswordHash = "AQAAAAEAACcQAAAAEKdFzfYr+/auZG9ALdHQjbqWuqK/OpNNYlh2bCE51Rdb4LAikdJ3tSyKJhiFD3/6Cg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "Y2LK2XCOM4FDYBMT76ROIFBOJXCBK2IL",
                            TwoFactorEnabled = false,
                            UserName = "administrateur"
                        });
                });

            modelBuilder.Entity("Proxima.Server.Data.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Proxima.Shared.Models.Adresse", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Agenceid")
                        .HasColumnType("int");

                    b.Property<int>("Codepostale")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Societé")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdresseId");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("Proxima.Shared.Models.Agence", b =>
                {
                    b.Property<int>("AgenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libellé")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgenceId");

                    b.ToTable("Agence");
                });

            modelBuilder.Entity("Proxima.Shared.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adressenlevement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adresslivraison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Proxima.Shared.Models.Sondage", b =>
                {
                    b.Property<int>("SondageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libellé")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obligatoire")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SondageId");

                    b.ToTable("Sondage");
                });

            modelBuilder.Entity("Proxima.Shared.Models.Tournee", b =>
                {
                    b.Property<int>("TourneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Agenceid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_tournee")
                        .HasColumnType("datetime2");

                    b.Property<string>("Libellé")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LivreurId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehiculeId")
                        .HasColumnType("int");

                    b.HasKey("TourneeId");

                    b.ToTable("Tournee");
                });

            modelBuilder.Entity("Proxima.Shared.Models.Vehicule", b =>
                {
                    b.Property<int>("VehiculeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Matriculation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Poid")
                        .HasColumnType("int");

                    b.HasKey("VehiculeId");

                    b.ToTable("Vehicule");
                });

            modelBuilder.Entity("Proxima.Shared.Models.Zone", b =>
                {
                    b.Property<int>("zoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("codepostal")
                        .HasColumnType("int");

                    b.Property<string>("ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("zoneId");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Proxima.Server.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("Proxima.Server.Data.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proxima.Server.Data.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Proxima.Server.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Proxima.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Proxima.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Proxima.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
